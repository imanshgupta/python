# -*- coding: utf-8 -*-
"""numpyprg2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l0WuKkbyfpCrfFP1NKAXwTmWL6s_kSQu
"""

import numpy as np
A= np.arange(10).reshape(2,5)
print(A)

A.shape

"""the dimensions of the array"""

A.ndim

"""number of axes (dimensions) of the array"""

B= np.array([1.5,2,3])
print(B.dtype)

A.dtype.name

A.size

"""the total number of elements of the array"""

A.itemsize

"""the size in bytes of each element of the array. an array of elements of type float64 has itemsize 8 (=64/8), 
type complex32 has itemsize 4 (=32/8). 

"""

A.dtype.itemsize

type(A)

print(type(A))

B = np.array([1.5,2,4,6, 7, 8])
B

print(B.shape)
print(B.size)
print(B.dtype)
print(B.ndim)
print(B.itemsize)
type(B)

c = np.array( [ [1,2], [3,4] ], dtype=complex )
print(c)

c = np.array( [ [1,2], [3,4] ], dtype=float )
print(c)

np.zeros((3, 4))

import numpy as np
np.ones( (2,3,4,2), dtype=np.int16 )

np.empty( (2,3) )

"""the function empty creates an array whose initial content is random and depends on the state of the memory"""

np.arange( 10, 30, 5 )

np.arange( 10, 0, -2 )

np.linspace( 0, 2, 5 )

"""function** linspace **receives as an argument the number of elements that we want, instead of the step"""

np.arange( 0, 2, 0.3 )

c = np.arange(24).reshape(2,3,4)         # 3d array
print(c)

print(np.arange(10000))

a = np.array( [30,45,60,90] )
b = np.arange( 4 )
print(a)
print(b)
c = a-b
print(c)

np.sin(a)

a<=45

A = np.array( [[1,1],
               [0,1]] )
B = np.array( [[2,0],
               [3,4]] )
 A * B       # element wise product

A@B #matrix product

A.dot(B)   # matrix product

a = np.arange(10)**3
print(a)
print(a[2])
print(a[2:5])

rg = np.random.default_rng(2)     # create instance of default random number generator
a = np.ones((2,3), dtype=int)
b = rg.random((2,3))
a *= 3
print(a)
print(b)

a=np.array([[1,2,3],[4,5,6]])
print(a.sum())
print(a.min())
print(a.max())

b = np.arange(12).reshape(3,4)
print(b)
print("--------------------------------------")
print (b.sum(axis=0)  )   # sum of each column
print(b.min(axis=1))      # min of each row

print(b[::-1])
a=np.array([5,56,-1,23])
print(a[::-1])